import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import * as FiIcons from 'react-icons/fi';
import SafeIcon from '../../common/SafeIcon';
import { usePropertyStore } from '../../store/propertyStore';
import toast from 'react-hot-toast';

const { FiPlus, FiEdit3, FiTrash2, FiUsers, FiDollarSign, FiX, FiBed } = FiIcons;

const RoomManagement = ({ propertyId, onClose }) => {
  const { getPropertyById, updateProperty } = usePropertyStore();
  const [property, setProperty] = useState(null);
  const [rooms, setRooms] = useState([]);
  const [showRoomModal, setShowRoomModal] = useState(false);
  const [selectedRoom, setSelectedRoom] = useState(null);
  const [editMode, setEditMode] = useState(false);

  useEffect(() => {
    const foundProperty = getPropertyById(propertyId);
    if (foundProperty) {
      setProperty(foundProperty);
      setRooms(foundProperty.rooms || []);
    }
  }, [propertyId, getPropertyById]);

  const handleAddRoom = () => {
    setSelectedRoom(null);
    setEditMode(false);
    setShowRoomModal(true);
  };

  const handleEditRoom = (room) => {
    setSelectedRoom(room);
    setEditMode(true);
    setShowRoomModal(true);
  };

  const handleDeleteRoom = (roomId) => {
    if (window.confirm('Are you sure you want to delete this room?')) {
      const updatedRooms = rooms.filter(room => room.id !== roomId);
      setRooms(updatedRooms);
      updateProperty(propertyId, { rooms: updatedRooms });
      toast.success('Room deleted successfully');
    }
  };

  const handleSaveRoom = (roomData) => {
    let updatedRooms;
    
    if (editMode) {
      updatedRooms = rooms.map(room =>
        room.id === selectedRoom.id ? { ...roomData, id: selectedRoom.id } : room
      );
    } else {
      const newRoom = {
        ...roomData,
        id: Date.now() // In real app, this would be generated by backend
      };
      updatedRooms = [...rooms, newRoom];
    }

    setRooms(updatedRooms);
    updateProperty(propertyId, { rooms: updatedRooms });
    setShowRoomModal(false);
    toast.success(`Room ${editMode ? 'updated' : 'added'} successfully`);
  };

  if (!property) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Property not found</h3>
          <button
            onClick={onClose}
            className="bg-booking-blue text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Go Back
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Room Management</h2>
          <p className="text-gray-600 mt-1">Manage rooms for {property.name}</p>
        </div>
        <div className="flex space-x-3">
          <button
            onClick={handleAddRoom}
            className="flex items-center space-x-2 bg-booking-blue text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            <SafeIcon icon={FiPlus} />
            <span>Add Room</span>
          </button>
          <button
            onClick={onClose}
            className="flex items-center space-x-2 bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400 transition-colors"
          >
            <SafeIcon icon={FiX} />
            <span>Close</span>
          </button>
        </div>
      </div>

      {/* Rooms Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {rooms.map((room, index) => (
          <motion.div
            key={room.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow"
          >
            <div className="flex items-start justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">{room.name}</h3>
              <div className="flex space-x-2">
                <button
                  onClick={() => handleEditRoom(room)}
                  className="text-blue-600 hover:text-blue-800 transition-colors"
                  title="Edit Room"
                >
                  <SafeIcon icon={FiEdit3} />
                </button>
                <button
                  onClick={() => handleDeleteRoom(room.id)}
                  className="text-red-600 hover:text-red-800 transition-colors"
                  title="Delete Room"
                >
                  <SafeIcon icon={FiTrash2} />
                </button>
              </div>
            </div>

            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2 text-gray-600">
                  <SafeIcon icon={FiDollarSign} />
                  <span className="text-sm">Price per night</span>
                </div>
                <span className="font-semibold text-booking-blue">${room.price_per_night}</span>
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2 text-gray-600">
                  <SafeIcon icon={FiUsers} />
                  <span className="text-sm">Max guests</span>
                </div>
                <span className="font-medium">{room.max_guests}</span>
              </div>

              {room.amenities && room.amenities.length > 0 && (
                <div>
                  <p className="text-sm text-gray-600 mb-2">Amenities:</p>
                  <div className="flex flex-wrap gap-1">
                    {room.amenities.slice(0, 3).map((amenity, idx) => (
                      <span
                        key={idx}
                        className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs"
                      >
                        {amenity}
                      </span>
                    ))}
                    {room.amenities.length > 3 && (
                      <span className="text-xs text-gray-500">
                        +{room.amenities.length - 3} more
                      </span>
                    )}
                  </div>
                </div>
              )}
            </div>
          </motion.div>
        ))}

        {/* Add Room Card */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-gray-50 border-2 border-dashed border-gray-300 rounded-xl p-6 flex flex-col items-center justify-center text-center hover:border-booking-blue transition-colors cursor-pointer"
          onClick={handleAddRoom}
        >
          <SafeIcon icon={FiBed} className="text-4xl text-gray-400 mb-3" />
          <h3 className="text-lg font-medium text-gray-600 mb-2">Add New Room</h3>
          <p className="text-sm text-gray-500">Click to add a new room type</p>
        </motion.div>
      </div>

      {rooms.length === 0 && (
        <div className="text-center py-12 bg-white rounded-xl shadow-lg">
          <SafeIcon icon={FiBed} className="text-6xl text-gray-300 mx-auto mb-4" />
          <h3 className="text-xl font-semibold text-gray-900 mb-2">No rooms added yet</h3>
          <p className="text-gray-600 mb-6">Start by adding your first room type</p>
          <button
            onClick={handleAddRoom}
            className="bg-booking-blue text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Add Your First Room
          </button>
        </div>
      )}

      {/* Room Modal */}
      <AnimatePresence>
        {showRoomModal && (
          <RoomModal
            isOpen={showRoomModal}
            onClose={() => setShowRoomModal(false)}
            onSave={handleSaveRoom}
            room={selectedRoom}
            editMode={editMode}
          />
        )}
      </AnimatePresence>
    </div>
  );
};

// Room Modal Component
const RoomModal = ({ isOpen, onClose, onSave, room, editMode }) => {
  const [formData, setFormData] = useState({
    name: room?.name || '',
    price_per_night: room?.price_per_night || '',
    max_guests: room?.max_guests || 2,
    amenities: room?.amenities || [],
    description: room?.description || ''
  });

  const roomAmenities = [
    'WiFi', 'TV', 'Air Conditioning', 'Mini Bar', 'Room Service',
    'Balcony', 'City View', 'Ocean View', 'Mountain View', 'Garden View',
    'Kitchenette', 'Living Area', 'Work Desk', 'Safe', 'Bathtub',
    'Shower', 'Hair Dryer', 'Coffee Maker', 'Microwave', 'Refrigerator'
  ];

  const handleInputChange = (e) => {
    const { name, value, type } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'number' ? parseFloat(value) || 0 : value
    }));
  };

  const handleAmenityToggle = (amenity) => {
    setFormData(prev => ({
      ...prev,
      amenities: prev.amenities.includes(amenity)
        ? prev.amenities.filter(a => a !== amenity)
        : [...prev.amenities, amenity]
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
        className="bg-white rounded-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"
      >
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-bold text-gray-900">
            {editMode ? 'Edit Room' : 'Add New Room'}
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <SafeIcon icon={FiX} />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* Basic Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Room Name *
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                required
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-booking-blue focus:border-transparent"
                placeholder="e.g., Deluxe Room, Executive Suite"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Price per Night *
              </label>
              <input
                type="number"
                name="price_per_night"
                value={formData.price_per_night}
                onChange={handleInputChange}
                required
                min="0"
                step="0.01"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-booking-blue focus:border-transparent"
                placeholder="0.00"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Maximum Guests *
              </label>
              <select
                name="max_guests"
                value={formData.max_guests}
                onChange={handleInputChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-booking-blue focus:border-transparent"
              >
                {[1, 2, 3, 4, 5, 6, 7, 8].map(num => (
                  <option key={num} value={num}>{num} {num === 1 ? 'Guest' : 'Guests'}</option>
                ))}
              </select>
            </div>
          </div>

          {/* Description */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Description
            </label>
            <textarea
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              rows={3}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-booking-blue focus:border-transparent"
              placeholder="Describe the room features..."
            />
          </div>

          {/* Amenities */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Room Amenities
            </label>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3 max-h-48 overflow-y-auto">
              {roomAmenities.map(amenity => (
                <label key={amenity} className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={formData.amenities.includes(amenity)}
                    onChange={() => handleAmenityToggle(amenity)}
                    className="text-booking-blue focus:ring-booking-blue"
                  />
                  <span className="text-sm text-gray-700">{amenity}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Submit Button */}
          <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              type="submit"
              className="px-6 py-3 bg-booking-blue text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              {editMode ? 'Update Room' : 'Add Room'}
            </motion.button>
          </div>
        </form>
      </motion.div>
    </div>
  );
};

export default RoomManagement;